using Microsoft.EntityFrameworkCore;
using Models.Data;
using Models.Data.FoodItemData;
using Models.Data.RawMaterialData;
using Models.Data.RecipeData;
using Models.ViewModels.FoodItem;
using Models.ViewModels.FoodType;
using Models.ViewModels.RawMaterial;
using Models.ViewModels.Recipe;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;

namespace Repositories.FoodTypeRepository
{
    
    public class FoodTypeRepository : IRepositoryBase<FoodTypeVM>, IFoodTypeRepository
    {
        private AppDbContext _context;
        public FoodTypeRepository(AppDbContext context)
        {
            _context = context;
        }
        public int Add(FoodTypeVM foodType)
        {
            var lastFoodType = _context.FoodTypes.OrderByDescending(fi => fi.FoodTypeCode).FirstOrDefault();
            int newFoodTypeNumber = 1; // Default if no existing records

            if (lastFoodType != null)
            {
                // Extract the number part of the FoodCode and increment it
                if (int.TryParse(lastFoodType.FoodTypeCode.Substring(2), out int lastCodeNumber))
                {
                    newFoodTypeNumber = lastCodeNumber + 1;
                }
            }

            string newFoodCode = $"FT{newFoodTypeNumber:D4}";
            var _foodType = new FoodType()
            {
                FoodTypeCode = newFoodCode,
                FoodTypeName = foodType.FoodTypeName,
                AddedDate = DateTime.Now,
                ImageURL = foodType.ImageURL,
            };

            _context.FoodTypes.Add(_foodType);
            object value = _context.SaveChanges();

            // After SaveChanges, _foodItem will have the ID generated by the database.
            int addedFoodTypeId = _foodType.Id;
            

            return addedFoodTypeId;
        }

        public int UpdateFoodTypeCountByFoodTypeId(int Id)
        {

           
            return 1;
        }
        public int DeleteById(int id)
        {
             FoodType? foodtype = _context.FoodTypes.FirstOrDefault(r => r.Id == id && !r.IsDeleted);

            if (foodtype == null)
            {
                // Handle the case where the recipe with the given ID is not found
                return -1; // You might want to return an error code or throw an exception
            }

            // Set IsDeleted to true for the FoodType
            foodtype.IsDeleted = true;
            foodtype.ModifiedDate = DateTime.Now;
            
            // Save changes to the database
            _context.SaveChanges();

            return foodtype.Id;
        }

        public FoodTypeVM GetById(int Id)
        {
            var foodType = _context.FoodTypes.Where(n => n.Id == Id).Select(foodType => new FoodTypeVM()
            {
                Id = foodType.Id,
                FoodTypeCode = foodType.FoodTypeCode,
                ImageURL = foodType.ImageURL,
                FoodTypeName = foodType.FoodTypeName,
                AddedDate = foodType.AddedDate,
                IsDeleted = foodType.IsDeleted,
                ModifiedDate = foodType.ModifiedDate
            }).FirstOrDefault();
            return foodType;
        }

        public int UpdateById(int id, FoodTypeVM foodType)
        {
            FoodType? previousFoodType = _context.FoodTypes.FirstOrDefault(r => r.Id == id && !r.IsDeleted);
            if (previousFoodType == null)
            {
                // Handle the case where the  raw Material with the given ID is not found
                return -1; // You might want to return an error code or throw an exception
            }
            previousFoodType.ImageURL = foodType.ImageURL;
            previousFoodType.FoodTypeName = foodType.FoodTypeName;
            previousFoodType.ModifiedDate = DateTime.Now;

            _context.SaveChanges();
            return previousFoodType.Id;
        }

      
        public FoodTypeVM[] ListSimpeleFoodTypes()
        {
            var simpleFoodTypes = _context.FoodTypes
                 .Where(ft => !ft.IsDeleted)
                 .Select(foodType => new FoodTypeVM()
                 {
                     Id = foodType.Id,
                     FoodTypeCode = foodType.FoodTypeCode,
                     ImageURL = foodType.ImageURL,
                     FoodTypeName = foodType.FoodTypeName,
                     AddedDate = foodType.AddedDate,
                     IsDeleted = foodType.IsDeleted,
                     ModifiedDate = foodType.ModifiedDate
                 })
                 .ToArray();

            return simpleFoodTypes;
        }
    }
}
