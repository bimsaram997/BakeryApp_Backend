
using Microsoft.EntityFrameworkCore;
using Models.Data;
using Models.Data.ProductData;
using Models.Filters;
using Models.Helpers;
using Models.Pagination;
using Models.Requests.Update_Requests;
using Models.ViewModels;
using Models.ViewModels.Product;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace Repositories.ProductRepository
{
    public interface IProductRepository 
    {
        int UpdateByProductCode(string foodCode);
        bool IsFoodTypeLinked(int foodTypeId);
        void AddBatchDetails(int productId, long batchId );
        int UpdateProductsByBatchId(long batchId, UpdateProduct updateModel);
        PaginatedProducts GetAll(ProductListAdvanceFilter filter);
    }
    public class ProductRepository : IRepositoryBase<ProductVM>, IProductRepository
    {
        private AppDbContext _context;
        public ProductRepository(AppDbContext context)
        {
            _context = context;
        }

        public int UpdateByProductCode(string foodCode)
        {
            return 1;
        }
        public int Add(ProductVM product)
        {
            string newProductCode = Guid.NewGuid().ToString();
            var _product = new Product()
            {
                ProductCode = newProductCode,
      
                ProductDescription = product.ProductDescription,
                ProductPrice = product.ProductPrice,
                AddedDate = DateTime.Now,
                ImageURL = product.ImageURL,
                FoodTypeId = product.FoodTypeId,
                BatchId = product.BatchId,
            };

            _context.Product.Add(_product);
            object value = _context.SaveChanges();

            // After SaveChanges, _product will have the ID generated by the database.
            int addedItemId = _product.Id;

            return addedItemId;
        }


        public int DeleteById(int id)
        {
            throw new NotImplementedException();
        }

        

        public ProductVM GetById(int id)
        {
            ProductVM? product = _context.Product
       .Where(fi => fi.Id == id && !fi.IsDeleted)
       .Select(fi => new ProductVM
       {
           Id = fi.Id,
           ProductCode = fi.ProductCode,
           AddedDate = fi.AddedDate,
           ProductDescription = fi.ProductDescription,
           ProductPrice = fi.ProductPrice,
           ImageURL = fi.ImageURL,
           FoodTypeId = fi.FoodTypeId,
           FoodTypeName = fi.foodType.FoodTypeName,
           IsSold =  fi.IsSold,
           BatchId = fi.BatchId,
     
       })
       .FirstOrDefault();

            return product;
        }

        public int UpdateById(int id, ProductVM entity)
        {
            throw new NotImplementedException();
        }

        

        public PaginatedProducts GetAll(ProductListAdvanceFilter filter)
        {
            IQueryable<Product> query = _context.Product
                .Where(fi => !fi.IsDeleted);

            query = SortHelper.ApplySorting(query.AsQueryable(), filter.SortBy, filter.IsAscending);

            if (filter != null)
            {
                if (filter.FoodTypeId.HasValue)
                {
                    query = query.Where(fi => fi.FoodTypeId == filter.FoodTypeId);
                }

                if (filter.ProductPrice.HasValue)
                {
                    query = query.Where(fi => fi.ProductPrice == filter.ProductPrice);
                }

                if (!string.IsNullOrEmpty(filter.SearchString))
                {
                    query = query.Where(fi =>
                        fi.ProductCode.Contains(filter.SearchString) ||
                        fi.ProductDescription.Contains(filter.SearchString) 
                    );
                }

                if (filter.BatchId.HasValue)
                {
                    query = query.Where(fi => _context.BatchProduct.Any(bfi => bfi.ProductId == fi.Id && bfi.BatchId == filter.BatchId));
                }


                if (!string.IsNullOrEmpty(filter.AddedDate))
                {
                    if (DateTime.TryParse(filter.AddedDate, out DateTime filterDate))
                    {
                        query = query.Where(fi => fi.AddedDate >= filterDate && fi.AddedDate < filterDate.AddDays(1));
                    }
                   
                }

                if (filter.Available != null)
                {
                    // Only Available filter is specified
                  
                        query = query.Where(fi => fi.IsSold == filter.Available);
                     
                   
                }
               

            }

            int totalCount = query.Count();

            query = query.Skip((filter.Pagination.PageIndex - 1) * filter.Pagination.PageSize).Take(filter.Pagination.PageSize);

            var paginatedResult = query
                .Select(fi => new AllProductVM
                {
                    Id = fi.Id,
                    ProductCode = fi.ProductCode,
                    AddedDate = fi.AddedDate,
                    ProductDescription = fi.ProductDescription,
                    ProductPrice = fi.ProductPrice,
                    ImageURL = fi.ImageURL,
                    FoodTypeId = fi.FoodTypeId,
                    FoodTypeName = fi.foodType.FoodTypeName,
                   BatchId = fi.BatchId,
                    IsSold = fi.IsSold
                })
                .ToList();

            var result = new PaginatedProducts
            {
                Items = paginatedResult,
                TotalCount = totalCount,
                PageIndex = filter.Pagination.PageIndex,
                PageSize = filter.Pagination.PageSize
            };

            return result;
        }

        public int UpdateProductsByBatchId(long batchId, UpdateProduct updateItem)
        {
            var productsToUpdate = _context.Product
     .Where(fi => fi.BatchId == batchId && !fi.IsDeleted && !fi.IsSold)
     .ToList();

            foreach (Product product in productsToUpdate)
            {
                product.ProductPrice = updateItem.ProductPrice;
                product.ProductDescription = updateItem.ProductDescription;
                product.ProductPrice = updateItem.ProductPrice;
                product.IsSold = (bool)updateItem.IsSold;
                product.AddedDate = updateItem.AddedDate;
                product.ImageURL = updateItem.ImageURL;
            }

            _context.SaveChanges();
            return updateItem.Id;
        }



        public void AddBatchDetails(int productId, long batchId)
        {
            BatchProduct batchFoodItem = new BatchProduct()
            {
                BatchId = batchId,
                ProductId = productId
            };
            _context.BatchProduct.Add(batchFoodItem);
            object value = _context.SaveChanges();

            // After SaveChanges, _product will have the ID generated by the database.
            long addedBatchId = batchFoodItem.BatchId;

            //return addedBatchId;
        }
        public bool IsFoodTypeLinked(int foodTypeId)
        {
            bool isLinked = _context.Product.Any(fi => fi.FoodTypeId == foodTypeId);
            return isLinked;

        }

       
    }
}
