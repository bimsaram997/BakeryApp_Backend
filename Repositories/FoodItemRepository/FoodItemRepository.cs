
using Microsoft.EntityFrameworkCore;
using Models.Data;
using Models.Data.FoodItemData;
using Models.Filters;
using Models.Helpers;
using Models.Pagination;
using Models.Requests.Update_Requests;
using Models.ViewModels;
using Models.ViewModels.FoodItem;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace Repositories.FoodItemRepository
{
    public interface IFoodItemRepository 
    {
        int UpdateByFoodCode(string foodCode);
        bool IsFoodTypeLinked(int foodTypeId);
        void AddBatchDetails(int foodId, long batchId );
        int UpdateItemsByBatchId(long batchId, UpdateFoodItem updateModel);
        PaginatedFoodItems GetAll(ProductListAdvanceFilter filter);
    }
    public class FoodItemRepository : IRepositoryBase<FoodItemVM>, IFoodItemRepository
    {
        private AppDbContext _context;
        public FoodItemRepository(AppDbContext context)
        {
            _context = context;
        }

        public int UpdateByFoodCode(string foodCode)
        {
            return 1;
        }
        public int Add(FoodItemVM foodItem)
        {
            var lastFoodType = _context.FoodItems.OrderByDescending(fi => fi.FoodCode).FirstOrDefault();
            int newFoodTypeNumber = 1; // Default if no existing records

            if (lastFoodType != null)
            {
                // Extract the number part of the FoodCode and increment it
                if (int.TryParse(lastFoodType.FoodCode.Substring(1), out int lastCodeNumber))
                {
                    newFoodTypeNumber = lastCodeNumber + 1;
                }
            }

            string newFoodCode = $"F{newFoodTypeNumber:D4}";
            var _foodItem = new FoodItem()
            {
                FoodCode = newFoodCode,
      
                FoodDescription = foodItem.FoodDescription,
                FoodPrice = foodItem.FoodPrice,
                AddedDate = DateTime.Now,
                ImageURL = foodItem.ImageURL,
                FoodTypeId = foodItem.FoodTypeId,
            };

            _context.FoodItems.Add(_foodItem);
            object value = _context.SaveChanges();

            // After SaveChanges, _foodItem will have the ID generated by the database.
            int addedItemId = _foodItem.Id;

            return addedItemId;
        }


        public int DeleteById(int id)
        {
            throw new NotImplementedException();
        }

        

        public FoodItemVM GetById(int id)
        {
            FoodItemVM? foodItem = _context.FoodItems
       .Where(fi => fi.Id == id && !fi.IsDeleted)
       .Select(fi => new FoodItemVM
       {
           Id = fi.Id,
           FoodCode = fi.FoodCode,
           AddedDate = fi.AddedDate,
           FoodDescription = fi.FoodDescription,
           FoodPrice = fi.FoodPrice,
           ImageURL = fi.ImageURL,
           FoodTypeId = fi.FoodTypeId,
           FoodTypeName = fi.foodType.FoodTypeName,
           IsSold =  fi.IsSold,
           BatchId = _context.BatchFoodItem.FirstOrDefault(bfi => bfi.FoodItemId == fi.Id).BatchId ,
     
       })
       .FirstOrDefault();

            return foodItem;
        }

        public int UpdateById(int id, FoodItemVM entity)
        {
            throw new NotImplementedException();
        }

        

        public PaginatedFoodItems GetAll(ProductListAdvanceFilter filter)
        {
            IQueryable<FoodItem> query = _context.FoodItems
                .Where(fi => !fi.IsDeleted);

            query = SortHelper.ApplySorting(query.AsQueryable(), filter.SortBy, filter.IsAscending);

            if (filter != null)
            {
                if (filter.FoodTypeId.HasValue)
                {
                    query = query.Where(fi => fi.FoodTypeId == filter.FoodTypeId);
                }

                if (filter.FoodPrice.HasValue)
                {
                    query = query.Where(fi => fi.FoodPrice == filter.FoodPrice);
                }

                if (!string.IsNullOrEmpty(filter.SearchString))
                {
                    query = query.Where(fi =>
                        fi.FoodCode.Contains(filter.SearchString) ||
                        fi.FoodDescription.Contains(filter.SearchString) 
                    );
                }

                if (filter.BatchId.HasValue)
                {
                    query = query.Where(fi => _context.BatchFoodItem.Any(bfi => bfi.FoodItemId == fi.Id && bfi.BatchId == filter.BatchId));
                }


                if (!string.IsNullOrEmpty(filter.AddedDate))
                {
                    if (DateTime.TryParse(filter.AddedDate, out DateTime filterDate))
                    {
                        query = query.Where(fi => fi.AddedDate >= filterDate && fi.AddedDate < filterDate.AddDays(1));
                    }
                   
                }

                if (filter.Available != null)
                {
                    // Only Available filter is specified
                  
                        query = query.Where(fi => fi.IsSold == filter.Available);
                     
                   
                }
               

            }

            int totalCount = query.Count();

            query = query.Skip((filter.Pagination.PageIndex - 1) * filter.Pagination.PageSize).Take(filter.Pagination.PageSize);

            var paginatedResult = query
                .Select(fi => new AllFoodItemVM
                {
                    Id = fi.Id,
                    FoodCode = fi.FoodCode,
                    AddedDate = fi.AddedDate,
                    FoodDescription = fi.FoodDescription,
                    FoodPrice = fi.FoodPrice,
                    ImageURL = fi.ImageURL,
                    FoodTypeId = fi.FoodTypeId,
                    FoodTypeName = fi.foodType.FoodTypeName,
                    BatchId = _context.BatchFoodItem.FirstOrDefault(bfi => bfi.FoodItemId == fi.Id).BatchId,
                    IsSold = fi.IsSold
                })
                .ToList();

            var result = new PaginatedFoodItems
            {
                Items = paginatedResult,
                TotalCount = totalCount,
                PageIndex = filter.Pagination.PageIndex,
                PageSize = filter.Pagination.PageSize
            };

            return result;
        }

        public int UpdateItemsByBatchId(long batchId, UpdateFoodItem updateItem)
        {
            var foodItemIdsToUpdate = _context.BatchFoodItem
            .Where(bfi => bfi.BatchId == batchId)
            .Select(bfi => bfi.FoodItemId)
            .ToList();

            var foodItemsToUpdate = _context.FoodItems
                .Where(fi => foodItemIdsToUpdate.Contains(fi.Id) && !fi.IsDeleted && !fi.IsSold)
                .ToList();

            foreach (FoodItem foodItem in foodItemsToUpdate)
            {
                foodItem.FoodPrice = updateItem.FoodPrice;
                foodItem.FoodDescription = updateItem.FoodDescription;
                foodItem.FoodPrice = updateItem.FoodPrice;
                foodItem.IsSold = (bool)updateItem.IsSold;
                foodItem.AddedDate = updateItem.AddedDate;
                foodItem.ImageURL = updateItem.ImageURL;
            }

            _context.SaveChanges();
            return updateItem.Id;
          
        }



        public void AddBatchDetails(int foodId, long batchId)
        {
            BatchFoodItem batchFoodItem = new BatchFoodItem()
            {
                BatchId = batchId,
                FoodItemId = foodId
            };
            _context.BatchFoodItem.Add(batchFoodItem);
            object value = _context.SaveChanges();

            // After SaveChanges, _foodItem will have the ID generated by the database.
            long addedBatchId = batchFoodItem.BatchId;

            //return addedBatchId;
        }
        public bool IsFoodTypeLinked(int foodTypeId)
        {
            bool isLinked = _context.FoodItems.Any(fi => fi.FoodTypeId == foodTypeId);
            return isLinked;

        }

       
    }
}
