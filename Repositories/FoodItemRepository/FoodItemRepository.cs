
using Microsoft.EntityFrameworkCore;
using Models.Data;
using Models.Data.FoodItemData;
using Models.ViewModels;
using Models.ViewModels.FoodItem;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Repositories.FoodItemRepository
{
    public interface IFoodItemRepository 
    {
        int UpdateByFoodCode(string foodCode);
        bool IsFoodTypeLinked(int foodTypeId);
        void AddBatchDetails(int foodId, long batchId );
    }
    public class FoodItemRepository : IRepositoryBase<FoodItemVM>, IFoodItemRepository
    {
        private AppDbContext _context;
        public FoodItemRepository(AppDbContext context)
        {
            _context = context;
        }

        public int UpdateByFoodCode(string foodCode)
        {
            return 1;
        }
        public int Add(FoodItemVM foodItem)
        {
            var lastFoodType = _context.FoodItems.OrderByDescending(fi => fi.FoodCode).FirstOrDefault();
            int newFoodTypeNumber = 1; // Default if no existing records

            if (lastFoodType != null)
            {
                // Extract the number part of the FoodCode and increment it
                if (int.TryParse(lastFoodType.FoodCode.Substring(1), out int lastCodeNumber))
                {
                    newFoodTypeNumber = lastCodeNumber + 1;
                }
            }

            string newFoodCode = $"F{newFoodTypeNumber:D4}";
            var _foodItem = new FoodItem()
            {
                FoodCode = newFoodCode,
      
                FoodDescription = foodItem.FoodDescription,
                FoodPrice = foodItem.FoodPrice,
                AddedDate = DateTime.Now,
                ImageURL = foodItem.ImageURL,
                FoodTypeId = foodItem.FoodTypeId,
            };

            _context.FoodItems.Add(_foodItem);
            object value = _context.SaveChanges();

            // After SaveChanges, _foodItem will have the ID generated by the database.
            int addedItemId = _foodItem.Id;

            return addedItemId;
        }


        public int DeleteById(int id)
        {
            throw new NotImplementedException();
        }

        

        public FoodItemVM GetById(int id)
        {
            throw new NotImplementedException();
        }

        public int UpdateById(int id, FoodItemVM entity)
        {
            throw new NotImplementedException();
        }

        public void AddBatchDetails(int foodId, long batchId)
        {
            BatchFoodItem batchFoodItem = new BatchFoodItem()
            {
                BatchId = batchId,
                FoodItemId = foodId
            };
            _context.BatchFoodItem.Add(batchFoodItem);
            object value = _context.SaveChanges();

            // After SaveChanges, _foodItem will have the ID generated by the database.
            long addedBatchId = batchFoodItem.BatchId;

            //return addedBatchId;
        }
        public bool IsFoodTypeLinked(int foodTypeId)
        {
            bool isLinked = _context.FoodItems.Any(fi => fi.FoodTypeId == foodTypeId);
            return isLinked;

        }
    }
}
