using Models.Data;
using Models.Data.Address;
using Models.ViewModels.Address;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Repositories.AddressRepository
{
  
    public interface IAddressRepository
    {


      //  PaginatedProducts GetAll(ProductListAdvanceFilter filter);
    }
    public class AddressRepository : IRepositoryBase<AddressVM>
    {
        private AppDbContext _context;
        public AddressRepository(AppDbContext context)
        {
            _context = context;
        }


        public int Add(AddressVM address)
        {

            var _address = new Addresses()
            {
                FullAddress = address.FullAddress,
                Street1 = address.Street1,
                Street2 = address.Street2,
                City = address.City,
                Country = address.Country,
                PostalCode = address.PostalCode,
                AddedDate = DateTime.Now,


            };

            _context.Address.Add(_address);
            object value = _context.SaveChanges();

            // After SaveChanges, _product will have the ID generated by the database.
            int addedAdressId = _address.Id;

            return addedAdressId;
        }


        public int DeleteById(int id)
        {
            throw new NotImplementedException();
        }



        public AddressVM GetById(int id)
        {
            AddressVM? address = _context.Address
       .Where(fi => fi.Id == id && !fi.IsDeleted)
       .Select(fi => new AddressVM
       {
           Id = fi.Id,
           FullAddress = fi.FullAddress,
           AddedDate = fi.AddedDate,
           Street1 = fi.Street1,
           Street2 = fi.Street2,
           City = fi.City,
           Country = fi.Country,
           PostalCode = fi.PostalCode,
           ModifiedDate = fi.ModifiedDate,
           IsDeleted = fi.IsDeleted,
       })
       .FirstOrDefault();

            return address;
        }

        public int UpdateById(int id, AddressVM entity)
        {
            Addresses? previousAddress = _context.Address.FirstOrDefault(p => p.Id == id && !p.IsDeleted);
            if (previousAddress == null)
            {
                return -1;
            }

            Addresses updateAddress = previousAddress;
            updateAddress.FullAddress = entity.FullAddress;
            updateAddress.Street1 = entity.Street1;
            updateAddress.Street2 = entity.Street2;
            updateAddress.City = entity.City;
            updateAddress.Country = entity.Country;
            updateAddress.PostalCode = entity.PostalCode;
            updateAddress.ModifiedDate = DateTime.Now;

            _context.SaveChanges();
            return updateAddress.Id;
        }



        /* public PaginatedProducts GetAll(ProductListAdvanceFilter filter)
         {
             IQueryable<Product> query = _context.Product
                 .Where(fi => !fi.IsDeleted);

             query = SortHelper.ApplySorting(query.AsQueryable(), filter.SortBy, filter.IsAscending);

             if (filter != null)
             {
                 if (filter.SellingPrice.HasValue)
                 {
                     query = query.Where(fi => fi.SellingPrice == filter.SellingPrice);
                 }

                 if (filter.CostPrice.HasValue)
                 {
                     query = query.Where(fi => fi.CostPrice == filter.CostPrice);
                 }

                 if (filter.Unit.HasValue)
                 {
                     query = query.Where(fi => fi.Unit == filter.Unit);
                 }

                 if (filter.CostCode.HasValue)
                 {
                     query = query.Where(fi => fi.CostCode == filter.CostCode);
                 }

                 if (filter.RecipeId.HasValue)
                 {
                     query = query.Where(fi => fi.RecipeId == filter.RecipeId);
                 }

                 if (!string.IsNullOrEmpty(filter.SearchString))
                 {
                     query = query.Where(fi =>
                         fi.ProductCode.Contains(filter.SearchString) || fi.Name.Contains(filter.SearchString) ||
                         fi.ProductDescription.Contains(filter.SearchString)
                     );
                 }



                 if (!string.IsNullOrEmpty(filter.AddedDate))
                 {
                     if (DateTime.TryParse(filter.AddedDate, out DateTime filterDate))
                     {
                         query = query.Where(fi => fi.AddedDate >= filterDate && fi.AddedDate < filterDate.AddDays(1));
                     }

                 }
             }

             int totalCount = query.Count();

             query = query.Skip((filter.Pagination.PageIndex - 1) * filter.Pagination.PageSize).Take(filter.Pagination.PageSize);

             var paginatedResult = query
                 .Select(fi => new AllProductVM
                 {
                     Id = fi.Id,
                     Name = fi.Name,
                     ProductCode = fi.ProductCode,
                     AddedDate = fi.AddedDate,
                     ProductDescription = fi.ProductDescription,
                     ModifiedDate = fi.ModifiedDate,
                     SellingPrice = fi.SellingPrice,
                     CostPrice = fi.CostPrice,
                     CostCode = fi.CostCode,
                     Unit = fi.Unit,
                     RecipeId = fi.RecipeId,
                     RecipeName = _context.Recipes
                         .Where(recipe => recipe.Id == fi.RecipeId)
                         .Select(recipe => recipe.RecipeName)
                         .FirstOrDefault()


                 })
                 .ToList();

             var result = new PaginatedProducts
             {
                 Items = paginatedResult,
                 TotalCount = totalCount,
                 PageIndex = filter.Pagination.PageIndex,
                 PageSize = filter.Pagination.PageSize
             };

             return result;
         }*/







    }

    }

