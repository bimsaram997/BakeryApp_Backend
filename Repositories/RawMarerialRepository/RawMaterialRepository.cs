using Models.Data;
using Models.Data.FoodItemData;
using Models.Data.RawMaterialData;
using Models.Filters;
using Models.Helpers;
using Models.Migrations;
using Models.ViewModels;
using Models.ViewModels.FoodItem;
using Models.ViewModels.FoodType;
using Models.ViewModels.RawMaterial;


namespace Repositories.RawMarerialRepository
{
    public interface IRawMaterialRepository
    {
         RawMatRecipeVM GetRawMaterialRecipeByRawMatIdAndRecipeId(int recipeId, int rawMaterialId);
         int UpdateRawMaterialCountbyRawMatId(int rawMatId, double newStockQuantity);
        void StoreRawMaterialQuantitiesUsed(int foodId, Dictionary<int, double> rawMaterialQuantitiesUsed);
        PaginatedRawMaterials GetAll(RawMaterialListAdvanceFilter filter);

    }
    public class RawMaterialRepository : IRepositoryBase<RawMaterialVM>, IRawMaterialRepository
    {
        private AppDbContext _context;
        public RawMaterialRepository(AppDbContext context)
        {
            _context = context;
        }

        public PaginatedRawMaterials GetAll(RawMaterialListAdvanceFilter filter)
        {
            IQueryable<RawMaterial> query = _context.RawMaterials
                .Where(fi => !fi.IsDeleted);

            query = SortHelper.ApplySorting(query.AsQueryable(), filter.SortBy, filter.IsAscending);

            if (filter != null)
            {
                if (!string.IsNullOrEmpty(filter.SearchString))
                {
                    query = query.Where(fi =>
                        fi.Name.Contains(filter.SearchString)  || fi.RawMaterialCode.Contains(filter.SearchString)
                    );
                }


                if (filter.RawMaterialQuantityType.HasValue)
                {
                    query = query.Where(fi => fi.RawMaterialQuantityType == filter.RawMaterialQuantityType);
                }

                if (filter.Quantity.HasValue)
                {
                    query = query.Where(fi => fi.Quantity == filter.Quantity);
                }


                if (!string.IsNullOrEmpty(filter.AddedDate))
                {
                    if (DateTime.TryParse(filter.AddedDate, out DateTime filterDate))
                    {
                        query = query.Where(fi => fi.AddedDate >= filterDate && fi.AddedDate < filterDate.AddDays(1));
                    }

                }

            }

            int totalCount = query.Count();

            query = query.Skip((filter.Pagination.PageIndex - 1) * filter.Pagination.PageSize).Take(filter.Pagination.PageSize);

            var paginatedResult = query
                .Select(fi => new AllRawMaterialVM
                {
                    Id = fi.Id,
                    Name = fi.Name,
                    AddedDate = fi.AddedDate,
                    Quantity = fi.Quantity,
                    RawMaterialQuantityType = fi.RawMaterialQuantityType,
                    ImageURL = fi.ImageURL,
                    ModifiedDate = fi.ModifiedDate,
                    RawMaterialCode = fi.RawMaterialCode

                })
                .ToList();

            var result = new PaginatedRawMaterials
            {
                Items = paginatedResult,
                TotalCount = totalCount,
                PageIndex = filter.Pagination.PageIndex,
                PageSize = filter.Pagination.PageSize
            };

            return result;
        }

     

        public int Add(RawMaterialVM rawMaterial)
        {

            RawMaterial? lastRawMaterial = _context.RawMaterials.OrderByDescending(fi => fi.RawMaterialCode).FirstOrDefault();
            int newRowMaterialNumber = 1; // Default if no existing records

            if (lastRawMaterial != null)
            {
                // Extract the number part of the FoodCode and increment it
                if (int.TryParse(lastRawMaterial.RawMaterialCode.Substring(2), out int lastCodeNumber))
                {
                    newRowMaterialNumber = lastCodeNumber + 1;
                }
            }
            string newRawMaterialCode = $"RM{newRowMaterialNumber:D4}";
            RawMaterial _rawMaterial = new RawMaterial()
            {
                RawMaterialCode = newRawMaterialCode,
                Name = rawMaterial.Name,
                AddedDate = rawMaterial.AddedDate,
                Quantity= rawMaterial.Quantity,
                ImageURL = rawMaterial.ImageURL,
                RawMaterialQuantityType = rawMaterial.RawMaterialQuantityType
            };
            _context.RawMaterials.Add(_rawMaterial);
            object value = _context.SaveChanges();
            // After SaveChanges, _rawMaterial will have the ID generated by the database.
            int addedRawMaterialId = _rawMaterial.Id;
            return addedRawMaterialId;
        }

        public int DeleteById(int id)
        {
            RawMaterial rawMaterial = _context.RawMaterials.FirstOrDefault(r => r.Id == id && !r.IsDeleted);
            if (rawMaterial == null)
            {
                // Handle the case where the raw material with the given ID is not found
                return -1; // You might want to return an error code or throw an exception
            }
            rawMaterial.IsDeleted = true;
            rawMaterial.ModifiedDate = DateTime.Now;
            // Save changes to the database
            _context.SaveChanges();
            return rawMaterial.Id;
        }

        public RawMaterialVM GetById(int Id)
        {
            RawMaterialVM? rawMaterial = _context.RawMaterials.Where(n => n.Id == Id && !n.IsDeleted).Select(rawMaterial => new RawMaterialVM()
            {
                Id = rawMaterial.Id,
                RawMaterialCode = rawMaterial.RawMaterialCode,
                Name = rawMaterial.Name,
                ImageURL = rawMaterial.ImageURL,
                Quantity = rawMaterial.Quantity,
                AddedDate = rawMaterial.AddedDate,
                RawMaterialQuantityType = rawMaterial.RawMaterialQuantityType,
                IsDeleted =  rawMaterial.IsDeleted,
                ModifiedDate = rawMaterial.ModifiedDate
                
            }).FirstOrDefault();
            return rawMaterial;
        }

        public int UpdateById(int id, RawMaterialVM rawMaterial)
        {
            RawMaterial? previousRawMaterial = _context.RawMaterials.FirstOrDefault(r => r.Id == id && !r.IsDeleted);
            if (previousRawMaterial == null)
            {
                // Handle the case where the  raw Material with the given ID is not found
                return -1; // You might want to return an error code or throw an exception
            }
            previousRawMaterial.Name = rawMaterial.Name;
            previousRawMaterial.ImageURL = rawMaterial.ImageURL;
            previousRawMaterial.Quantity = rawMaterial.Quantity;
            previousRawMaterial.RawMaterialQuantityType = rawMaterial.RawMaterialQuantityType;
            previousRawMaterial.ModifiedDate = DateTime.Now;
            
            _context.SaveChanges();
            return previousRawMaterial.Id;
        }

       

        public RawMatRecipeVM GetRawMaterialRecipeByRawMatIdAndRecipeId(int rawMaterialId, int recipeId)
        {
            RawMatRecipeVM? rawMaterialRecipe = _context.RawMaterialRecipe.Where(n => n.RecipeId == recipeId && n.RawMaterialId == rawMaterialId).Select(rawMaterialRecipe => new RawMatRecipeVM()
            {
                id = rawMaterialRecipe.Id,
                rawMaterialId = rawMaterialRecipe.RawMaterialId,
                recipeId = rawMaterialRecipe.RecipeId,
                rawMaterialQuantity = rawMaterialRecipe.RawMaterialQuantity


            }).FirstOrDefault();
            return rawMaterialRecipe;
        }

        public int UpdateRawMaterialCountbyRawMatId(int rawMatId, double newStockQuantity)
        {
            RawMaterial? previousRawMaterial = _context.RawMaterials.FirstOrDefault(r => r.Id == rawMatId && !r.IsDeleted);
            if (previousRawMaterial == null)
            {
                // Handle the case where the  raw Material with the given ID is not found
                return -1; // You might want to return an error code or throw an exception
            }
             previousRawMaterial.Quantity = newStockQuantity;
             previousRawMaterial.ModifiedDate = DateTime.Now;
            
            _context.SaveChanges();
            return previousRawMaterial.Id;
        }

        public void StoreRawMaterialQuantitiesUsed(int foodId, Dictionary<int, double> rawMaterialQuantitiesUsed)
        {
            foreach (var entry in rawMaterialQuantitiesUsed)
            {
                var rawMaterialUsage = new RawMaterialUsage
                {
                    FoodItemId = foodId,
                    RawMaterialId = entry.Key,
                    QuantityUsed = entry.Value
                };

                _context.rawMaterialUsage.Add(rawMaterialUsage);
            }

            _context.SaveChanges();
        }

      
    }
}
