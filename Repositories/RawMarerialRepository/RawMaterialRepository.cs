using Models.Data;
using Models.Data.FoodItemData;
using Models.Data.RawMaterialData;
using Models.ViewModels.FoodItem;
using Models.ViewModels.FoodType;
using Models.ViewModels.RawMaterial;


namespace Repositories.RawMarerialRepository
{
    public class RawMaterialRepository : IRepositoryBase<RawMaterialVM>
    {
        private AppDbContext _context;
        public RawMaterialRepository(AppDbContext context)
        {
            _context = context;
        }

        public int Add(RawMaterialVM rawMaterial)
        {

            RawMaterial? lastRawMaterial = _context.RawMaterials.OrderByDescending(fi => fi.RawMaterialCode).FirstOrDefault();
            int newRowMaterialNumber = 1; // Default if no existing records

            if (lastRawMaterial != null)
            {
                // Extract the number part of the FoodCode and increment it
                if (int.TryParse(lastRawMaterial.RawMaterialCode.Substring(1), out int lastCodeNumber))
                {
                    newRowMaterialNumber = lastCodeNumber + 1;
                }
            }
            string newRawMaterialCode = $"RM{newRowMaterialNumber:D4}";
            RawMaterial _rawMaterial = new RawMaterial()
            {
                RawMaterialCode = newRawMaterialCode,
                Name = rawMaterial.name,
                AddedDate = rawMaterial.addedDate,
                Quantity= rawMaterial.quantity,
                ImageURL = rawMaterial.imageURL,
                RawMaterialQuantityType = rawMaterial.rawMaterialQuantityType
            };
            _context.RawMaterials.Add(_rawMaterial);
            object value = _context.SaveChanges();
            // After SaveChanges, _rawMaterial will have the ID generated by the database.
            int addedRawMaterialId = _rawMaterial.Id;
            return addedRawMaterialId;
        }

        public int DeleteById(int id)
        {
            RawMaterial rawMaterial = _context.RawMaterials.FirstOrDefault(r => r.Id == id && !r.IsDeleted);
            if (rawMaterial == null)
            {
                // Handle the case where the raw material with the given ID is not found
                return -1; // You might want to return an error code or throw an exception
            }
            rawMaterial.IsDeleted = true;
            rawMaterial.ModifiedDate = DateTime.Now;
            // Save changes to the database
            _context.SaveChanges();
            return rawMaterial.Id;
        }

        public RawMaterialVM GetById(int Id)
        {
            RawMaterialVM? rawMaterial = _context.RawMaterials.Where(n => n.Id == Id && !n.IsDeleted).Select(rawMaterial => new RawMaterialVM()
            {
                id = rawMaterial.Id,
                rawMaterialCode = rawMaterial.RawMaterialCode,
                name = rawMaterial.Name,
                imageURL = rawMaterial.ImageURL,
                quantity = rawMaterial.Quantity,
                addedDate = rawMaterial.AddedDate,
                rawMaterialQuantityType = rawMaterial.RawMaterialQuantityType,
                isDeleted =  rawMaterial.IsDeleted,
                modifiedDate = rawMaterial.ModifiedDate
                
            }).FirstOrDefault();
            return rawMaterial;
        }

        public int UpdateById(int id, RawMaterialVM rawMaterial)
        {
            RawMaterial? previousRawMaterial = _context.RawMaterials.FirstOrDefault(r => r.Id == id);
            if (previousRawMaterial == null)
            {
                // Handle the case where the  raw Material with the given ID is not found
                return -1; // You might want to return an error code or throw an exception
            }
            previousRawMaterial.Name = rawMaterial.name;
            previousRawMaterial.ImageURL = rawMaterial.imageURL;
            previousRawMaterial.Quantity = rawMaterial.quantity;
            previousRawMaterial.RawMaterialQuantityType = rawMaterial.rawMaterialQuantityType;
            previousRawMaterial.ModifiedDate = DateTime.Now;
            
            _context.SaveChanges();
            return previousRawMaterial.Id;
        }
    }
}
