// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models.Data;

#nullable disable

namespace Models.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231224131830_comunsUpdated2")]
    partial class comunsUpdated2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Data.FoodItemData.FoodItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("FoodPrice")
                        .HasColumnType("float");

                    b.Property<int>("FoodTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FoodTypeId");

                    b.ToTable("FoodItems");
                });

            modelBuilder.Entity("Models.Data.FoodItemData.FoodType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FoodTypeCount")
                        .HasColumnType("int");

                    b.Property<string>("FoodTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FoodTypes");
                });

            modelBuilder.Entity("Models.Data.RawMaterialData.RawMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RawMaterialCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RawMaterialQuantityType")
                        .HasColumnType("int");

                    b.Property<int?>("Recipeid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Recipeid");

                    b.ToTable("RawMaterials");
                });

            modelBuilder.Entity("Models.Data.RawMaterialData.RawMaterialRecipe", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("rawMaterialId")
                        .HasColumnType("int");

                    b.Property<double?>("rawMaterialQuantity")
                        .HasColumnType("float");

                    b.Property<int>("recipeId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("rawMaterialId");

                    b.HasIndex("recipeId");

                    b.ToTable("RawMaterialRecipe");
                });

            modelBuilder.Entity("Models.Data.RecipeData.Recipe", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("addedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("foodTypeId")
                        .HasColumnType("int");

                    b.Property<string>("recipeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Models.Data.FoodItemData.FoodItem", b =>
                {
                    b.HasOne("Models.Data.FoodItemData.FoodType", "foodType")
                        .WithMany()
                        .HasForeignKey("FoodTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("foodType");
                });

            modelBuilder.Entity("Models.Data.RawMaterialData.RawMaterial", b =>
                {
                    b.HasOne("Models.Data.RecipeData.Recipe", null)
                        .WithMany("requiredRawMaterials")
                        .HasForeignKey("Recipeid");
                });

            modelBuilder.Entity("Models.Data.RawMaterialData.RawMaterialRecipe", b =>
                {
                    b.HasOne("Models.Data.RawMaterialData.RawMaterial", "rawMaterial")
                        .WithMany()
                        .HasForeignKey("rawMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Data.RecipeData.Recipe", "recipe")
                        .WithMany()
                        .HasForeignKey("recipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("rawMaterial");

                    b.Navigation("recipe");
                });

            modelBuilder.Entity("Models.Data.RecipeData.Recipe", b =>
                {
                    b.Navigation("requiredRawMaterials");
                });
#pragma warning restore 612, 618
        }
    }
}
